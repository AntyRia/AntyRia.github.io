[{"title":"备忘录","path":"/2025/02/11/备忘录/","content":"服务器信息1234破解https://github.com/yeongpin/cursor-free-vipirm https://raw.githubusercontent.com/yeongpin/cursor-free-vip/main/scripts/install.ps1 | iex pip源地址： 1https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple 破解office： 1https://qweree.cn/index.php/2209/ 常用库链接 torch:https://download.pytorch.org/whl/ cuda:https://developer.nvidia.com/cuda-11-8-0-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=WSL-Ubuntu&amp;target_version=2.0&amp;target_type=deb_local cudnn:https://developer.nvidia.com/rdp/cudnn-archive tensorrt:https://developer.nvidia.com/nvidia-tensorrt-8x-download TensorRT安装方式（tar安装）：https://blog.csdn.net/m0_37605642/article/details/120095114 ALSL库相关arecord 查看连接的音频设备：arecord -l 查看设备详情：arecord --dump-hw-params -D &lt;设备名称&gt; 录音相关: pcm格式： 1arecord -t raw -f S16_LE -c 1 -r 8000 -d 10 test.pcm wav格式 1arecord -d 10 -r 8000 -f S16_LE -t wav recorded_audio.wav GPU硬解码重新编译流程(ffmpeg，opencv) 前置依赖项安装 若存在conda环境需要卸载conda下的ffmpeg包 123456apt updateapt-get updateapt install -y libreadline-dev libbz2-dev libsm6 libxrender1 libxext-dev libgomp1 liblzma-dev libgl1-mesa-glx libprotobuf-dev protobuf-compiler libglib2.0-0 mpich openmpi-bin libopenmpi-dev libass-devapt-get install -y gcc g++ make cmake zlib1g zlib1g-dev openssl libsqlite3-dev libssl-dev libffi-dev unzip pciutils net-tools libblas-dev gfortran libblas3 libopenblas-dev git-lfs libswresample-dev autoconf automake build-essential libass-dev libfreetype6-dev libsdl2-dev libtheora-dev libtool libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev pkg-config texinfo zlib1g-dev yasm libx264-dev libx265-dev libvpx-dev libfdk-aac-dev libmp3lame-dev libopus-dev nv-codec-headers安装 1234git clone https://github.com/FFmpeg/nv-codec-headers.gitgit checkout sdk/11.1 # 根据cuda版本下载make -j&amp;(nproc)make install Video_Codec_SDK安装 新版本nvida官网安装：https://developer.nvidia.com/nvidia-video-codec-sdk/ 老版本：https://developer.nvidia.com/video-codec-sdk-archive 有GPU驱动最低版本限制，要注意对应 要和 nv-codec-headers 版本对应，然后将内部依赖库复制到cuda下，注意修改路径 12345cp ./Video_Codec_SDK_11.1.5/Lib/linux/stubs/x86_64/* /usr/local/cuda/lib64/stubscp ./Video_Codec_SDK_11.1.5/Interface/* /usr/local/cuda/includecp ./Video_Codec_SDK_11.1.5/Lib/linux/stubs/x86_64/* /usr/local/cuda-11.8/lib64/stubscp ./Video_Codec_SDK_11.1.5/Interface/* /usr/local/cuda-11.8/includecp ./Video_Codec_SDK_11.1.5/Interface/* /usr/include 编译ffmpeg 12345678910111213141516171819wget http://ffmpeg.org/releases/ffmpeg-5.1.tar.gz &amp;&amp; tar zxvf ffmpeg-5.1.tar.gz./configure --prefix=/usr/local/ffmpeg --disable-asm --disable-x86asm \\ --enable-cuda --enable-cuvid --enable-nvenc \\ --enable-nonfree --enable-libnpp \\ --extra-cflags=-I/usr/local/cuda/include \\ --extra-cflags=-fPIC --extra-ldflags=-L/usr/local/cuda/lib64 \\ --enable-gpl --enable-libx264 --enable-libx265 \\ --enable-shared \\ --enable-libass \\ --enable-libfdk-aac \\ --enable-libfreetype \\ --enable-libmp3lame \\ --enable-libopus \\ --enable-libtheora \\ --enable-libvorbis make -j20make install 环境变量 12345678vim /root/.bashrcexport FFMPEG_HOME=/usr/local/ffmpegexport PATH=$PATH:$FFMPEG_HOME/binexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$FFMPEG_HOME/libexport PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$FFMPEG_HOME/lib/pkgconfig:/usr/local/libsource /root/.bashrc 测试 1ffmpeg -i test.mp4 -c:v h264_nvenc -c:a aac output.mp4 编译opencv docker常用命令安装 添加Docker官方的GPG密钥 1sudo curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - 添加Docker软件源 1sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot; 安装Docker 1apt-get install docker-ce docker-ce-cli containerd.io 启动Docker 12345678# 启动 Dockersystemctl start docker# 安装工具apt-get -y install apt-transport-https ca-certificates curl software-properties-common# 重启 Dockerservice docker restart 配置文件 默认 &#x2F;etc&#x2F;docker&#x2F;daemon.json 1234567891011121314151617&#123; &quot;registry-mirrors&quot;: [ &quot;https://do.nark.eu.org&quot;, &quot;https://dc.j8.work&quot;, &quot;https://docker.m.daocloud.io&quot;, &quot;https://dockerproxy.com&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;, &quot;https://docker.nju.edu.cn&quot; ], &quot;default-runtime&quot;: &quot;nvidia&quot;, &quot;runtimes&quot;: &#123; &quot;nvidia&quot;: &#123; &quot;path&quot;: &quot;/usr/bin/nvidia-container-runtime&quot;, &quot;runtimeArgs&quot;: [] &#125; &#125;&#125; 重启Docker服务 12systemctl daemon-reloadsystemctl restart docker 基本指令 查看某个镜像生成历史： history | grep 镜像名 容器—&gt;镜像： docker commit &lt;容器id&gt; &lt;新镜像名:版本&gt; 镜像打包： docker save -o xxx.tar &lt;现有镜像名&gt; 镜像导入： docker load -i xxx.tar 修改配置文件1vim /etc/docker/daemon.json 1systemctl restart docker dockerfile相关 dockerfile用于构建镜像而非容器 Dockerfile 参数详解 | Docker-guide (gitbooks.io) 配置Dockerfile 123456FROM &lt;image&gt;:&lt;tag&gt; # 所需的基础镜像MAINTAINER &lt;name&gt; # 指定维护者信息WORKDIR /app # 工作目录COPY . /app # 将当前目录下的所有文件复制到容器的 /app 目录下# RUN pip install -r requirements.txt # 安装依赖# CMD [&quot;python&quot;, &quot;/app/myscript.py&quot;] # 指定脚本执行的命令 构建镜像 1docker build -t &lt;镜像名称&gt; . docekr-compose命令 -f 指定yaml文件 -p 指定项目名 查看容器编排信息（要先进入docker-compose.yaml文件所在的目录下）： 1docker-compose -f docker-compose.tyh.yaml -p tyh_project ps 创建新容器： -d 后台 –build 强制重新构建镜像并启动服务（通常修改Dockerfile后使用） –force-recreate 强制重新创建服务的容器，即使配置没有改变 1docker-compose -f docker-compose.tyh.yaml -p tyh_project up -d 停止并删除： –volumes 删除所有与服务相关的卷 –rmi 删除与 Compose 项目相关的镜像 1docker-compose -f docker-compose.tyh.yaml -p tyh_project down 启动： 1docker-compose -f docker-compose.tyh.yaml -p tyh_project start 停止不删除： 1docker-compose -f docker-compose.tyh.yaml -p tyh_project stop 重启： 1docker-compose -f docker-compose.tyh.yaml -p tyh_project restart 日志： -f 动态跟踪 –tail n 限制显示行数为n 1docker-compose -f docker-compose.tyh.yaml -p tyh_project logs 进入容器：docker-compose exec &lt;服务名&gt; &lt;命令&gt; 重新构建使用的镜像：docker-compose build –no-cache 重新构建时不使用缓存 123456789101112131415161718192021222324version: &#x27;3.8&#x27;services: api: # docker-compose启动后对外展示的服务名称 build: # 与image二选一！！优先于image标签执行 context: ./path_to_dockerfile image: gpu-images:ubuntu20.04-cuda11.3.0-py38-torch1.11.0-tf1.15.5-1.8.0 container_name: api # 容器名 restart: always # 自动重启 shm_size: 8gb # 共享内存大小 deploy: resources: reservations: devices: - driver: &quot;nvidia&quot; count: &quot;all&quot; capabilities: [&quot;gpu&quot;] volumes: - /home/tangyihan/project/api:/mount_data ports: - &quot;16000:16000&quot; command: [&quot;tail&quot;, &quot;-f&quot;, &quot;/dev/null&quot;] environment: - LANG=C.UTF-8 - TZ=Asia/Shanghai RK3568相关 查看gpu使用率 1sudo watch -n 1 cat /sys/class/devfreq/fde60000.gpu/load 查看NPU使用率 1sudo watch -n 1 cat /sys/kernel/debug/rknpu/load Linux命令SSH相关 开启ssh服务 1apt-get install openssh-server 允许root远程连接 1vim /etc/ssh/sshd_config 12# 添加如下内容PermitRootLogin yes 设置root密码 1passwd root 重启服务 1systemctl restart ssh 配置代理1vim ~/.bashrc 将如下内容写入，然后修改hostip为提供代理的主机ip 1234567891011121314151617181920212223# add proxyexport hostip=192.168.8.91export socks_hostport=7890export http_hostport=7890alias proxy=&#x27; export https_proxy=&quot;http://$&#123;hostip&#125;:$&#123;http_hostport&#125;&quot; export http_proxy=&quot;http://$&#123;hostip&#125;:$&#123;http_hostport&#125;&quot; export ALL_PROXY=&quot;socks5://$&#123;hostip&#125;:$&#123;socks_hostport&#125;&quot; export all_proxy=&quot;socks5://$&#123;hostip&#125;:$&#123;socks_hostport&#125;&quot;&#x27;alias unproxy=&#x27; unset ALL_PROXY unset https_proxy unset http_proxy unset all_proxy&#x27;alias echoproxy=&#x27; echo $ALL_PROXY echo $all_proxy echo $https_proxy echo $http_proxy&#x27;#end proxy apt-get相关 查看安装的包 1dpkg -l | grep 卸载已有的包 1apt purge systemctl服务相关 添加一个服务（还需要修改） 1234567891011121314151617# 1.编写服务单元文件sudo vim /etc/systemd/system/CheckProcess.service# 将下列内容写入[Unit]Description=这里填写服务描述After=network.target[Service]ExecStart=/usr/bin/python3 /path/to/myscript.pyWorkingDirectory=/path/to/StandardOutput=inheritStandardError=inheritRestart=alwaysUser=nobody[Install]WantedBy=multi-user.target 查看系统正在运行的服务 1systemctl list-units --type=service --state=running 启停服务 1systemctl start/stop/restart &lt;目标服务&gt; 查看服务配置信息 1systemctl status &lt;目标服务&gt; 写入日志 将内容写入日志 1nohup ... &gt; train0711.log 2&gt;&amp;1 &amp; 实时查看 1tail -f xxx.log -n 500 GLIBC库升级 查看现有的版本 1strings /lib/x86_64-linux-gnu/libc.so.6 |grep GLIBC_ 编译安装指定版本 下载地址 1wget http://ftp.gnu.org/gnu/glibc/glibc-2.32.tar.gz 1tar -zxvf xxxxx 1mkdir build; cd build/ 1sudo apt-get install gawk bison -y 1../configure --prefix=/usr/local --disable-sanity-checks 1make -j4; make install 建立软链接 1cp /usr/local/lib/libm-xxxxxxx.so /lib/x86_64-linux-gnu/ 通过setup.py安装库1python setup.py build &amp;&amp; python setup.py install 查看python库依赖关系1pip install pipdeptree 1pipdeptree -p xxx库 查看文件大小占用1du -h --max-depth=1 | sort -hr ARM torch安装包 torch.kmtea.eu&#x2F;whl&#x2F;stable-cn.html 配置源&#x2F;etc&#x2F;apt&#x2F;sources.list官方： archive 源（http://archive.ubuntu.com）： AMD64 (x86_64) 和 Intel x86。 posts 源（http://ports.ubuntu.com）：arm64，armhf，PowerPC，ppc64el 和 s390x 国内： Ubuntu 中国官方源：源文件中是所有的地址加 cn. 即可（eg.http://cn.archive.ubuntu.com） 查看系统版本1lsb_release -a 查看arm几代12cat /proc/cpuinfo# 看CPU architecture 基于CodecFlow多机间通信 安装SSH服务 1apt-get install openssh-server 添加主机名（格式：ip 主机名） 1vim /etc/hosts 生成公钥 1ssh-keygen 给其他主机分发 12ssh-copy-id &lt;主机名&gt;重启ssh服务 service ssh restart 1234567#### 挂载硬盘查看分区```bashdf 查看硬盘设备（类似&#x2F;dev&#x2F;sdX的硬盘目录） 1fdisk -l 硬盘格式化 1mkfs.ext4 &lt;硬盘目录&gt; 创建挂载点并挂载 1mkdir &lt;挂载目录&gt; &amp;&amp; mount &lt;硬盘目录&gt; &lt;挂载目录&gt; 每次系统启动自动挂载硬盘（第二段或者第三段任选一条添加进去） 1vim /etc/fstab 1&lt;硬盘目录&gt; &lt;挂载目录&gt; ext4 defaults 0 0 1UUID=&lt;硬盘UUID&gt; &lt;挂载目录&gt; ext4 defaults 0 0 （获取硬盘uuid） 1blkid &lt;硬盘目录&gt; MPI1apt-get install openmpi-bin 1mpiexec --version NFS文件共享1 服务端 1apt-get update &amp;&amp; apt install nfs-kernel-server 1vim /etc/exports 配置共享目录（添加下面内容） 1&lt;共享目录&gt; *(rw,sync,no_subtree_check) 使得配置生效 1exportfs -a 启动服务 1service nfs-kernel-server start 2 客户端 1apt-get update &amp;&amp; apt install nfs-common 创建客户端共享目录： 1mkdir xxxx 挂载NFS共享目录的本地目录 1mount &lt;NFS服务器的IP地址或主机名&gt;:&lt;NFS服务器共享目录路径&gt; &lt;客户端共享目录地址&gt; 3 工具 检查挂载是否成功 1df -h 7Z1apt-get install p7zip-full 17z x &lt;压缩包名称&gt; 17z a &lt;压缩包名称&gt;.7z &lt;要压缩的名称&gt; 批量解压当前目录的压缩包 1for i in *.zip; do 7z x &quot;$i&quot;; done Vim1apt-get update 1apt-get install vim-gtk 支持中文，第二段贴进去： 1vim /etc/vim/vimrc 123set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936set termencoding=utf-8set encoding=utf-8 SFTP86服务器上默认 &#x2F;home&#x2F;hiyan 本地默认 C:\\Users\\admin\\Documents get &lt;文件名&gt; put &lt;上传&gt; cp &#x2F;home&#x2F;hiyan&#x2F;TensorRT-8.6.1.6.Linux.x86_64-gnu.cuda-11.8.tar.gz &#x2F;data8t&#x2F;g_sam_web_tyh conda安装conda: 1wget -c https://mirrors.bfsu.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh 1chmod 777 Miniconda3-latest-Linux-x86_64.sh 1sh Miniconda3-latest-Linux-x86_64.sh 查看所有： 1conda info -e 创建虚拟环境：conda create –name &lt;名字&gt; python&#x3D;3.8 -y 进入虚拟环境：conda activate &lt;名字&gt; 删除虚拟环境：conda remove -n &lt;名字&gt; –all 退出当前base环境 ： 1conda deactivate 安装cuda,cudnn： 12345678910# 找版本conda search cudatoolkit --infoconda search cudnn --infowget 你刚刚复制的链接地址conda install --use-local 本地cuda包所在的路径# 配置环境变量export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/miniconda3/pkgs/cudnn-8.2.1-cuda11.3_0/libexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/miniconda3/pkgs/cuda-cudart-11.8.89-0/libexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/miniconda3/pkgs/cudatoolkit-11.8.0-h6a678d5_0/lib 环境变量修改全局环境变量： vim /etc/profile 123- ```bash source /etc/profile 修改局部环境变量： vim ~/.bashrc 123- ```bash source ~/.bashrc 命令映射： 进入全局环境变量位置 alias &lt;自定义命令&gt;=&lt;原有命令&gt; 1234567- 刷新环境变量使之生效查看依赖路径：- ```bash pip show colossalai 大文件拆分 切割： split -b 1G &lt;文件名&gt; 合并： cat xaa xab xac … &gt; &lt;文件名&gt; Rsync1apt-get update &amp;&amp; apt-get install rsync -y 1rsync -avz &lt;文件(夹)名&gt; root@172.18.1.125:/home/hiyan rsync -avz &#x2F;raid0&#x2F;1&#x2F;yinxun root@172.18.1.125:&#x2F;data8t&#x2F;test_video_124&#x2F; 解压tar.gz： tar -zxvf &lt;文件&gt; tar.xz: tar -xvf &lt;文件&gt; z01、z02： 7z x &lt;文件&gt; 杀死端口1apt install net-tools 1netstat -ano | grep &lt;port&gt; 上面或者 1sudo lsof -i :&lt;port&gt; 1kill -9 &lt;PID&gt; TCP连接测试tcp连接： 被测端： 1nc -lk &lt;监听端口号&gt; 测试端 1nc -vz &lt;目标IP地址&gt; &lt;目标端口号&gt; 杀死tcp连接（没有pid）: 1netstat -nap |grep :&lt;端口&gt;|grep ESTABLISHED | awk &#x27;&#123;print $7&#125;&#x27;|awk -F&quot;\\/&quot; &#x27;&#123;print $1&#125;&#x27; |awk &#x27;!a[$1]++&#x27; |xargs kill 杀显存僵尸进程1fuser -v /dev/nvidia* 1kill -9 xxx 卸载cuda10.0及以下： 123cd /usr/local/cuda-xx.x/bin/sudo ./uninstall_cuda_xx.x.plsudo rm -rf /usr/local/cuda-xx.x cuda10.1及以上的卸载： 123cd /usr/local/cuda-xx.x/bin/sudo ./cuda-uninstallersudo rm -rf /usr/local/cuda-xx.x 论文链接残差网络 自研工具脚本python轮子 build_voc_dataset：Voc格式数据集按指定比例划分训练集 + 验证集 build_yolo_dataset：Yolo格式数据集按指定比例划分训练集 + 验证集 check_voc_xml_and_image：检查 图片 - voc格式xml标注文件 是否一一对应 extract_audio_from_dir：从一个指定目录里，递归提取所有音频文件到指定目录 extract_file_prefix_name：提取某目录下所有文件前缀 生成txt文件（Paddle） extract_label_valid_items：根据标注文件名称，找出包含有效标注的图片 merge_two_dir_voc_xml：合并两个文件夹下，同一图片的两种Voc格式标注 split_audio_to_fragment_audio：按照指定长度，切割某一目录下的所有音频 split_video_to_image：按照指定帧数，视频切割成图片 transfprm_audio_to_wav：音频批量转mp4 transform_labelme_to_coco：标注文件的labelme转coco格式 transform_labelme_to_voc：标注文件的labelme转voc格式 transform_voc_to_yolo：标注文件的voc转yolo格式 transform_voc_to_coco：标注文件的voc转coco格式【可能存在问题】 video_to_audio：视频抽取音频 OPEN IMAGES V7数据集 用Open Images Dataset V6制作yolo训练数据集(darknet版本)_yolo open images-CSDN博客 其他命令python调用自定义c库 将.c文件编译为.so库文件 1gcc -fPIC -shared 原始c文件 -o xxxx.so 在python中调用 123456import ctypeslibc = ctypes.CDLL对象名= libc(&quot;./xxxxx.so&quot;)对象名.函数() Dos编译C有cmakelist的项目1mkdir build;cd build 1cmake .. 1make -j8 查看当前python存储路径123import syspath = sys.executableprint(path) 快速Bash命令删除指定目录下所有名称为xxx的文件夹1find /home/hiyan/tyh_workspace/hd5_file -type d -name &#x27;xxx&#x27; -exec rm -rf &#123;&#125; + RK性能监测 查看GPU利用率 1sudo watch -n 1 cat /sys/devices/platform/fde60000.gpu/utilisation 查看NPU利用率"},{"title":"Hello World","path":"/2025/02/11/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]